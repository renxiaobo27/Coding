Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.

For example:

Given s = "aabb", return ["abba", "baab"].

Given s = "abc", return [].


public class Solution {
    public List<String> generatePalindromes(String s) {
        List<String> re = new ArrayList<String>();
        if(s==null|| s.length()==0)
            return re;
        int[]ct = new int[256];
        for(int i=0;i<s.length();i++)
        {
            ct[s.charAt(i)]++;
        }
        
        boolean oddFlag = false;
        StringBuilder sb = new StringBuilder();
        String single="";
        for(int i=0;i<256;i++)
        {
            if(ct[i]%2!=0)
            {
                if(oddFlag)
                    return re;
                oddFlag = true;
                single += (char)(i);
            }
           
                 for(int j=0;j<ct[i]/2;j++)
            {
                sb.append((char)(i));
            }
            
           
        }
        
        boolean [] visited = new boolean[sb.length()];
        permutation(single,sb.toString(),visited,re,new StringBuilder());
        return re;
    }
    public void permutation(String single,String candidate,boolean[]visited,List<String>re,StringBuilder tmp)
    {
        if(tmp.length()==candidate.length())
        {
            String reverse = new StringBuilder(tmp).reverse().toString();
            re.add(reverse+single+tmp);
            return;
        }
        for(int i=0;i<candidate.length();i++)
        {
            if(i>0&&candidate.charAt(i)==candidate.charAt(i-1) && !visited[i-1])
                continue;
            if(!visited[i])
            {
                visited[i] = true;
                tmp.append(candidate.charAt(i));
                permutation(single,candidate,visited,re,tmp);
                visited[i] = false;
                tmp.deleteCharAt(tmp.length()-1);
            }
        }
    }
}
