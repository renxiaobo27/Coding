You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
  
  public class Solution {
    int[][]dirs = {{1,0},{-1,0},{0,1},{0,-1}};
    public void wallsAndGates(int[][] rooms) {
        if(rooms==null || rooms.length==0)
            return;
        int rows = rooms.length;
        int cols = rooms[0].length;
        Queue<Integer> q = new LinkedList<Integer>();
        
        for(int i =0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(rooms[i][j]==0)
                {
                    q.add(i*cols+j);
                }
            }
        }
        
        while(!q.isEmpty())
        {
            int cur = q.poll();
            int x = cur /cols;
            int y = cur % cols;
            
            for(int []dir:dirs)
            {
                int newx = x + dir[0];
                int newy = y + dir[1];
                if(newx<0||newy<0||newx>=rows||newy>=cols)
                    continue;
                if(rooms[newx][newy]==Integer.MAX_VALUE)
                {
                    rooms[newx][newy] = rooms[x][y]+1;
                    q.add(newx*cols+newy);
                }
                
            }
        }
    }
    
   
}
