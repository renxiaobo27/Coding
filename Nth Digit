Find the nth digit of the infinite integer sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...

Note:
n is positive and will fit within the range of a 32-bit signed integer (n < 231).

Example 1:

Input:
3

Output:
3
Example 2:

Input:
11

Output:
0

Explanation:
The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.



// 思路： 
// 1~9 9个数 9*1=9个digit 
// 10~99 90个数 90*2=180个digit 
// 100~999 900个数 900*3=2700个digit 
// 10^k ~ k个9连成的数 9*10^k个数 (90*10^k)*k个digit
// 所以给点n，首先确定在几位数之间，如在1000~9999还是在其他之间？然后确定是该区间的哪个数？最后确定是该数字的哪个digit？ 
// 注意防止溢出。



public class Solution {
    public int findNthDigit(int n) {
         int k = 1;
        long len = 0;
        while (n > len) {
            len += (int) (9 * k * Math.pow(10, k - 1));
            k++;
        }
        k--;
        len -= (int) (9 * k * Math.pow(10, k - 1));
        // ————前部分
        int num = 0;
        if ((n - len) % k == 0) {
            num = (int) ((int) Math.pow(10, k - 1) + (n - len) / k - 1);
            String s = String.valueOf(num);
            return Integer.parseInt("" + s.charAt(s.length() - 1));
        } else {
            num = (int) ((int) Math.pow(10, k - 1) + (n - len) / k);
            String s = String.valueOf(num);
            return Integer.parseInt("" + s.charAt((int) ((n - len) % k - 1)));
        }
        
    }
}
