Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
return [9, 8, 6, 5, 3]

Example 2:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]

Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]

public class Solution {
    public int[] maxNumber(int[] nums1, int[] nums2, int k) {
        
        int len1 = nums1.length;
        int len2 = nums2.length;
        
        int []re = new int[k];
        for(int i=Math.max(0,k-len2);i<=k&&i<=len1;i++)
        {
            int[]tmp = merge(maxArray(nums1,i),maxArray(nums2,k-i),k);
            
            if(isGreater(tmp,0,re,0))
            {
                re = tmp;
            }
        }
        return re;
    }
    
    public int[] merge(int[]arr1,int[]arr2,int k)
    {
        
        if(arr1.length==0)
            return arr2;
        if(arr2.length==0)
            return arr1;
        int [] re = new int[k];
        
        int cur = 0;
        int i=0;
        int j=0;
        
        while(i<arr1.length && j< arr2.length)
        {
            if(isGreater(arr1,i,arr2,j))
            {
                re[cur++] = arr1[i++];
            }
            else
            {
                re[cur++] = arr2[j++];
            }
        }
        while(i<arr1.length)
        {
            re[cur++] = arr1[i++];
        }
        while(j<arr2.length)
        {
            re[cur++] = arr2[j++];
        }
        return re;
    }
    
    public int[] maxArray(int[]nums,int count)
    {
        int []re = new int[count];
        if(count==0)
            return re;
        int n = nums.length;
        int j=0;
        for(int i=0;i<n;i++)
        {
            while(j>0 && n-i-1>=count-j && re[j-1]<nums[i])
            {
                j--;
            }
            if(j<count)
                re[j++] = nums[i];
        }
        return re;
    }
    
    public boolean isGreater(int []arr1,int i,int[]arr2,int j)
    {
        while(i<arr1.length && j<arr2.length && arr1[i]==arr2[j])
        {
            i++;
            j++;
        }
        if(arr1.length==i) return false;
        if(arr2.length==j) return true;
        return arr1[i]>arr2[j];
    }
}
