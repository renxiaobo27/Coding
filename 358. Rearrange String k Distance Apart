Given a non-empty string str and an integer k, rearrange the string such that the same characters are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:
str = "aabbcc", k = 3

Result: "abcabc"

The same letters are at least distance 3 from each other.
Example 2:
str = "aaabc", k = 3 

Answer: ""

It is not possible to rearrange the string.
Example 3:
str = "aaadbbcc", k = 2

Answer: "abacabcd"

Another possible answer is: "abcabcda"

The same letters are at least distance 2 from each other.


public class Solution {
    public int seletedValue(int[]count,int[]valid,int i)
    {
        int select = Integer.MIN_VALUE;
        int val = -1;
        for(int j=0;j<count.length;j++)
        {
            if(count[j]>0&&i>=valid[j]&&count[j]>select)
            {
                select = count[j];
                val = j;
            }
        }
        return val;
    }
    public String rearrangeString(String str, int k) {
        int []count = new int[26];
        int []valid = new int[26];
        for(char c:str.toCharArray())
        {
            count[c-'a']++;
        }
        
        StringBuilder sb = new StringBuilder();
        for(int i=0;i<str.length();i++)
        {
            int curt = seletedValue(count,valid,i);
            if(curt==-1) return "";
            count[curt]--;
            valid[curt] = i+k;
            sb.append((char)('a'+curt));
        }
        return sb.toString();
    }
}
