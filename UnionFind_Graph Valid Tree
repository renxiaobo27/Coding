Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.



public class Solution {
    public boolean validTree(int n, int[][] edges) {
        int []index = new int[n];
        for(int i=0;i<n;i++)
        {
            index[i] = i;
        }
        //check cycle
        for(int[]each:edges)
        {
            int fa = find(each[0],index);
            int fb = find(each[1],index);
            if(fa!=fb)
            {
                union(each[0],each[1],index);
            }
            else
            {
                return false;
            }
        }
        //check only one root
        int ct = 0;
        for(int i=0;i<n;i++)
        {
            if(index[i]==i)
                ct++;
        }
        if(ct>1) return false;
        return true;
    }
    
    public void union(int a ,int b ,int []index)
    {
        int fa = find(a,index);
        int fb = find(b,index);
        if(fa!=fb)
        {
            index[fa] = fb;
        }
    }
    
    public int find(int id,int[]index)
    {
        while(id!=index[id])
        {
            index[id] = index[index[id]];
            id = index[id];
        }
        return id;
    }
}
