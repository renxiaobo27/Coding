Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.

public class NumArray {

    int[]bits;
    int[]n;
    
    public NumArray(int[] nums) {
        if(nums==null || nums.length==0)
            return ;
        int len = nums.length;
        n = new int[len];
        bits=new int[len+1];
        
        for(int i=0;i<nums.length;i++)
        {
            init(i+1,nums[i]);
            n[i] = nums[i];
        }
    }
    public void init(int id,int val)
    {
        while(id<bits.length)
        {
            bits[id] += val;
            id = id + (id&(-id));
        }
    }

    void update(int i, int val) {
        int diff = val - n[i];
        n[i] = val;
        init(i+1,diff);
    }

    public int sumRange(int i, int j) {
        return sum(j+1) - sum(i);
    }
    
    public int sum(int id)
    {
        int s = 0;
        while(id>0)
        {
            s+=bits[id];
            id = id-(id&(-id));
        }
        return s;
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
