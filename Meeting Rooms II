Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return 2.

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if(intervals==null || intervals.length==0)
            return 0;
        Arrays.sort(intervals,new Comparator<Interval>()
        {
            public int compare(Interval n1,Interval n2)
            {
               return n1.start - n2.start;
                
            }
            });
            
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        pq.offer(intervals[0].end);
        
        for(int i=1;i<intervals.length;i++)
        {
            pq.offer(intervals[i].end);
            if(intervals[i].start>=pq.peek())
            {
                pq.poll();
            }
        }
        
        return pq.size();
    }
}
