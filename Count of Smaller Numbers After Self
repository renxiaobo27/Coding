You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Given nums = [5, 2, 6, 1]

To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Return the array [2, 1, 1, 0].

public class Solution {
    static class TreeNode
    {
        int val;
        TreeNode left;
        TreeNode right;
        int count;
        
        public TreeNode(int val)
        {
            this.val = val;
            count = 1;
        }
    }
    public int insert(TreeNode root,int val)
    {
        int count = 0;
        
        TreeNode cur = root;
        while(cur!=null)
        {
            if(cur.val<val)
            {
                count += cur.count;
                if(cur.right!=null)
                {
                    cur = cur.right;
                }
                else
                {
                    cur.right = new TreeNode(val);
                    break;
                }
            }
            else 
            {
                cur.count++;
                if(cur.left!=null)
                {
                    cur = cur.left;
                }
                else
                {
                    cur.left = new TreeNode(val);
                    break;
                }
            }
        }
        return count;
        
    }
    
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> re = new ArrayList<Integer>();
        if(nums==null || nums.length==0)
            return re;
        
        int len = nums.length;
        TreeNode root = new TreeNode(nums[len-1]);
        re.add(0);
        
        for(int i=nums.length-2;i>=0;i--)
        {
            int val = insert(root,nums[i]);
            re.add(val);
        }
        Collections.reverse(re);
        return re;
    
    }
}
