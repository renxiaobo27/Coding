You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0



public class Solution {
    public int shortestDistance(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        
        int [][]dist = new int[rows][cols];
        int [][]numBuild = new int[rows][cols];
        int build = 0;
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]==1)
                {
                    bfs(grid,dist,numBuild,i,j);
                    build++;
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(grid[i][j]==0 && dist[i][j]!=0 && numBuild[i][j]==build)
                {
                    min = Math.min(min,dist[i][j]);
                }
            }
        }
        if(min==Integer.MAX_VALUE)
            return -1;
        return min;
    }
    
    public void bfs(int[][]grid,int[][]dist,int[][]number,int i,int j)
    {
        int [] pos = {i,j};
        Queue<int[]> q = new LinkedList<int[]>();
        q.add(pos);
        boolean [][]visited = new boolean[grid.length][grid[0].length];
        int [][]dirs ={{0,1},{0,-1},{1,0},{-1,0}};
        
        int level = 1;
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int k=0;k<size;k++)
            {
                int [] cur = q.poll();
                int x = cur[0];
                int y = cur[1];
                for(int []dir:dirs)
                {
                    int newx = x+dir[0];
                    int newy = y + dir[1];
                    if(newx>=0 && newy>=0 && newx<grid.length && newy<grid[0].length && !visited[newx][newy] && grid[newx][newy]==0)
                 {
                    visited[newx][newy] = true;
                    dist[newx][newy] += level;
                    number[newx][newy]++;
                    q.add(new int[]{newx,newy});
                    
                }
                }
            }
            level++;
        }
    }
}
