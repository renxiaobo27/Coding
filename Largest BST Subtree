Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

Note:
A subtree must include all of its descendants.
Here's an example:
    10
    / \
   5  15
  / \   \ 
 1   8   7
The Largest BST Subtree in this case is the highlighted one. 
The return value is the subtree's size, which is 3.

class Node{
     int lower;
     int upper;
     int size;
     boolean isBST;
     
     public Node()
     {
         lower = Integer.MAX_VALUE;
         upper = Integer.MIN_VALUE;
         size = 0;
         isBST = false;
     }
 }
public class Solution {
    public int largestBSTSubtree(TreeNode root) {
        return help(root).size;
    }
    
    public Node help(TreeNode node)
    {
        Node cur = new Node();
        if(node==null)
        {
            cur.isBST = true;
            return cur;
        }
        Node l = help(node.left);
        Node r = help(node.right);
        
        cur.lower = Math.min(node.val,l.lower);
        cur.upper = Math.max(node.val,r.upper);
        
        if(l.isBST && r.isBST && l.upper<node.val && r.lower>node.val)
        {
            cur.size = l.size+r.size+1;
            cur.isBST = true;
        }
        else
        {
            cur.size = Math.max(l.size,r.size);
            cur.isBST = false;
        }
        return cur;
            
    }
}
