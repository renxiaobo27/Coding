Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


public class Solution {
    
    public int countComponents(int n, int[][] edges) {
        int [] index = new int[n];
        for(int i=0;i<n;i++)
        {
            index[i] = i;
        }
        
        for(int[]each:edges)
        {
            union(each[0],each[1],index);
        }
        
        int ct = 0;
        for(int i=0;i<n;i++)
        {
            if(i==index[i])
                ct++;
        }
        return ct;
        
        
    }
    
    public void union(int a,int b,int[]index)
    {
        int fa = find(index,a);
        int fb = find(index,b);
        if(fa!=fb)
        {
            index[fa] = fb;
        }
    }
    public int find(int[]index,int id)
    {
        while(id!=index[id])
        {
            index[id] = index[index[id]];
            id = index[id];
        }
        return id;
    }
}
