Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

O(MN*4^K ) 时间 O(K) 空间 
K为word长度， M*N为board大小
空间复杂度是K是因为我用HashSet存visited信息，只动态地存当前dfs的路径；如果用boolean[][]来存visited信息的话空间复杂度就是O(MN)
时间复杂度：对每个点都要作为起始点dfs，对于每个起始点，拓展一次有四个可能性(四个邻居)，要拓展k次(word长度为k)


public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null || board.length==0)
            return false;
        int rows =board.length;
        int cols = board[0].length;
        boolean[][] visited = new boolean[rows][cols];
        
        for(int i=0;i<rows;i++)
        {
            for(int j=0;j<cols;j++)
            {
                if(board[i][j]==word.charAt(0))
                {
                    if(dfs(board,word,visited,0,i,j))
                        return true;
                }
            }
        }
        return false;
    }
    
    public boolean dfs(char[][]board,String word,boolean[][]visited,int pos,int x, int y)
    {
        if(pos==word.length())
            return true;
        if(x<0||y<0||x>=board.length||y>=board[0].length|| visited[x][y] ||word.charAt(pos)!=board[x][y]) return false;
        
        visited[x][y] = true;
        
        if(dfs(board,word,visited,pos+1,x+1,y))
            return true;
        if(dfs(board,word,visited,pos+1,x-1,y))
            return true;
        if(dfs(board,word,visited,pos+1,x,y+1))
            return true;
        if(dfs(board,word,visited,pos+1,x,y-1))
            return true;
        visited[x][y] = false;
        return false;
        
    }
}



////Trie 

import java.util.*;
public class Solution {
    public boolean exist(char[][] board, String word) {
        if(board==null || board.length==0)
            return false;
        boolean [][]visited = new boolean[board.length][board[0].length];
        
        Trie trie = new Trie();
        trie.buildTrie(word);
        
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
            	if(i==1&&j==1)
            		System.out.println(i + "  " + j);
                if(dfs(board,i,j,visited,trie.root))
                    return true;
            }
        }
        return false;
        
    }
    
    public boolean dfs(char[][]board,int x,int y,boolean[][]visited,TrieNode node)
    {
    	if(node==null) return false;
       
    	if(node.isWord)
        {
            return true;
        }
    	
        if(x<0||y<0||x>=board.length||y>=board[0].length|| visited[x][y])
            return false;
        
        
        
        visited[x][y] = true;
        
        if(dfs(board,x+1,y,visited,node.children.get(board[x][y])))
        	return true;
        if(dfs(board,x-1,y,visited,node.children.get(board[x][y])))
        	return true;
        if(dfs(board,x,y+1,visited,node.children.get(board[x][y])))
        	return true;
        if(dfs(board,x,y-1,visited,node.children.get(board[x][y])))
        	return true;
        visited[x][y] = false;
        return false;
        
        
        
    }
    
    
    
    
    class TrieNode 
    {
        boolean isWord;
        HashMap<Character,TrieNode> children;
        
        public TrieNode()
        {
            isWord = false;
            children = new HashMap<Character,TrieNode>();
        }
    }
    class Trie
    {
        public TrieNode root;
        public Trie()
        {
            root = new TrieNode();
        }
        public void buildTrie(String word)
        {
            TrieNode node = root;
            for(int i=0;i<word.length();i++)
            {
                char c = word.charAt(i);
                if(!node.children.containsKey(c))
                {
                    node.children.put(c,new TrieNode());
                }
                node = node.children.get(c);
            }
            node.isWord = true;
        }
        public boolean seachPrefix(String word)
        {
            TrieNode n = searchNode(word);
            if(n!=null)
                return true;
            return false;
        }
        
        public boolean searchWord(String word)
        {
            TrieNode n = searchNode(word);
            if(n!=null && n.isWord)
            {
                return true;
            }
            return false;
        }
        
        public TrieNode searchNode(String word)
        {
            if(word==null || word.length()==0)  
                return null;
            TrieNode node = root;
            
            for(int i=0;i<word.length();i++)
            {
                char c = word.charAt(i);
                if(node.children.containsKey(c))
                {
                    node = node.children.get(c);
                }
                else
                {
                    return null;
                }
            }
            return node;
        }
    }
    
    public static void main(String[]strs)
    {
    	char[][] board ={{'C','A','A'},{'A','A','A'},{'B','C','D'}};
    	String word = "AAB";
    	Solution s = new Solution();
    	System.out.println(s.exist(board, word));
    }
}
